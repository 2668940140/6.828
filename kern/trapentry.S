/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>

#include <kern/picirq.h>


###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num)						\
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)					\
	.globl name;							\
	.type name, @function;						\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps

.text

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

// Divide error                       0            No
// Debug exceptions                   1            No
// Breakpoint                         3            No
// Overflow                           4            No
// Bounds check                       5            No
// Invalid opcode                     6            No
// Coprocessor not available          7            No
// System error                       8            Yes (always 0)
// Coprocessor Segment Overrun        9            No
// Invalid TSS                       10            Yes
// Segment not present               11            Yes
// Stack exception                   12            Yes
// General protection fault          13            Yes
// Page fault                        14            Yes
// Coprocessor error                 16            No
// Two-byte SW interrupt             0-255         No

TRAPHANDLER_NOEC(trap_divide, T_DIVIDE)		// divide error
TRAPHANDLER_NOEC(trap_debug, T_DEBUG)		// debug exception
TRAPHANDLER_NOEC(intr_nmi, T_NMI)			// non-maskable interrupt
TRAPHANDLER_NOEC(trap_brkpt, T_BRKPT)		// breakpoint
TRAPHANDLER_NOEC(trap_oflow, T_OFLOW)		// overflow
TRAPHANDLER_NOEC(trap_bound, T_BOUND)		// bounds check
TRAPHANDLER_NOEC(trap_illop, T_ILLOP)		// illegal opcode
TRAPHANDLER_NOEC(intr_device, T_DEVICE)		// device not available
TRAPHANDLER(trap_dblflt, T_DBLFLT)		// double fault
TRAPHANDLER(trap_tss, T_TSS)			// invalid task switch segment
TRAPHANDLER(trap_segnp, T_SEGNP)		// segment not present
TRAPHANDLER(trap_stack, T_STACK)		// stack exception
TRAPHANDLER(trap_gpflt, T_GPFLT)		// general protection fault
TRAPHANDLER(trap_pgflt, T_PGFLT)		// page fault
TRAPHANDLER_NOEC(trap_fperr, T_FPERR)		// floating point error
TRAPHANDLER_NOEC(trap_align, T_ALIGN)		// alignment check
TRAPHANDLER_NOEC(trap_mchk, T_MCHK)		// machine check
TRAPHANDLER_NOEC(trap_simderr, T_SIMDERR)	// SIMD floating point error
TRAPHANDLER_NOEC(trap_syscall, T_SYSCALL)	// system call
TRAPHANDLER_NOEC(trap_default, T_DEFAULT)	// catchall

TRAPHANDLER_NOEC(trap_irq0, IRQ_OFFSET + 0)
TRAPHANDLER_NOEC(trap_irq1, IRQ_OFFSET + 1)
TRAPHANDLER_NOEC(trap_irq2, IRQ_OFFSET + 2)
TRAPHANDLER_NOEC(trap_irq3, IRQ_OFFSET + 3)
TRAPHANDLER_NOEC(trap_irq4, IRQ_OFFSET + 4)
TRAPHANDLER_NOEC(trap_irq5, IRQ_OFFSET + 5)
TRAPHANDLER_NOEC(trap_irq6, IRQ_OFFSET + 6)
TRAPHANDLER_NOEC(trap_irq7, IRQ_OFFSET + 7)
TRAPHANDLER_NOEC(trap_irq8, IRQ_OFFSET + 8)
TRAPHANDLER_NOEC(trap_irq9, IRQ_OFFSET + 9)
TRAPHANDLER_NOEC(trap_irq10, IRQ_OFFSET + 10)
TRAPHANDLER_NOEC(trap_irq11, IRQ_OFFSET + 11)
TRAPHANDLER_NOEC(trap_irq12, IRQ_OFFSET + 12)
TRAPHANDLER_NOEC(trap_irq13, IRQ_OFFSET + 13)
TRAPHANDLER_NOEC(trap_irq14, IRQ_OFFSET + 14)
TRAPHANDLER_NOEC(trap_irq15, IRQ_OFFSET + 15)


// #define T_DIVIDE     0		// divide error
// #define T_DEBUG      1		// debug exception
// #define T_NMI        2		// non-maskable interrupt
// #define T_BRKPT      3		// breakpoint
// #define T_OFLOW      4		// overflow
// #define T_BOUND      5		// bounds check
// #define T_ILLOP      6		// illegal opcode
// #define T_DEVICE     7		// device not available
// #define T_DBLFLT     8		// double fault
// /* #define T_COPROC  9 */	// reserved (not generated by recent processors)
// #define T_TSS       10		// invalid task switch segment
// #define T_SEGNP     11		// segment not present
// #define T_STACK     12		// stack exception
// #define T_GPFLT     13		// general protection fault
// #define T_PGFLT     14		// page fault
// /* #define T_RES    15 */	// reserved
// #define T_FPERR     16		// floating point error
// #define T_ALIGN     17		// aligment check
// #define T_MCHK      18		// machine check
// #define T_SIMDERR   19		// SIMD floating point error
// 
// // These are arbitrarily chosen, but with care not to overlap
// // processor defined exceptions or interrupt vectors.
// #define T_SYSCALL   48		// system call
// #define T_DEFAULT   500		// catchall

/*
 * Lab 3: Your code here for _alltraps
 */
// push values to make the stack look like a struct Trapframe
// load GD_KD into %ds and %es
// pushl %esp to pass a pointer to the Trapframe as an argument to trap()
// call trap (can trap ever return?)
.align 2
_alltraps:
	pushl %ds
	pushl %es
	pushal

	movl $GD_KD, %eax
	movw %ax, %ds
	movw %ax, %es
	
	pushl %esp
	call trap

// struct PushRegs {
// 	/* registers as pushed by pusha */
// 	uint32_t reg_edi;
// 	uint32_t reg_esi;
// 	uint32_t reg_ebp;
// 	uint32_t reg_oesp;		/* Useless */
// 	uint32_t reg_ebx;
// 	uint32_t reg_edx;
// 	uint32_t reg_ecx;
// 	uint32_t reg_eax;
// } __attribute__((packed));

// struct Trapframe {
// 	struct PushRegs tf_regs;
// 	uint16_t tf_es;
// 	uint16_t tf_padding1;
// 	uint16_t tf_ds;
// 	uint16_t tf_padding2;
// 	uint32_t tf_trapno;
// 	/* below here defined by x86 hardware */
// 	uint32_t tf_err;
// 	uintptr_t tf_eip;
// 	uint16_t tf_cs;
// 	uint16_t tf_padding3;
// 	uint32_t tf_eflags;
// 	/* below here only when crossing rings, such as from user to kernel */
// 	uintptr_t tf_esp;
// 	uint16_t tf_ss;
// 	uint16_t tf_padding4;
// } __attribute__((packed));


